// http://www.dustmop.io/blog/2015/04/28/nes-graphics-part-1/

// assigns a CHR tile to each position of the screen, of which there are
// 960. 256x240 (X by Y) pixel display, tile is 8x8 pixels

// The order of assignment is each row from left to right, top to bottom,
// and matches the calculated position found by adding the values from the
// rulers (earlier in post). So the upper-left-most position is $0, to the
// right of that is 0x1, and below it is 0x20 (tile).

// each tile has an associated 1-byte value that indicates the address of
// the bitmap to use in the CHR-ROM

// Maps an 8x8 bitmap to a tile of pixels
#[derive(Clone, Debug)]
pub struct NameTable {}

macro_rules! color {
    ($r:literal, $g:literal, $b:literal) => {
        Color {
            r: $r,
            g: $g,
            b: $b,
        }
    };
}

pub struct Color {
    r: u8,
    g: u8,
    b: u8,
}

pub const PALETTE_TABLE: [Color; 64] = [
    color!(0x7C, 0x7C, 0x7C),
    color!(0x00, 0x00, 0xFC),
    color!(0x00, 0x00, 0xBC),
    color!(0x44, 0x28, 0xBC),
    color!(0x94, 0x00, 0x84),
    color!(0xA8, 0x00, 0x20),
    color!(0xA8, 0x10, 0x00),
    color!(0x88, 0x14, 0x00),
    color!(0x50, 0x30, 0x00),
    color!(0x00, 0x78, 0x00),
    color!(0x00, 0x68, 0x00),
    color!(0x00, 0x58, 0x00),
    color!(0x00, 0x40, 0x58),
    color!(0x00, 0x00, 0x00),
    color!(0x00, 0x00, 0x00),
    color!(0x00, 0x00, 0x00),
    color!(0xBC, 0xBC, 0xBC),
    color!(0x00, 0x78, 0xF8),
    color!(0x00, 0x58, 0xF8),
    color!(0x68, 0x44, 0xFC),
    color!(0xD8, 0x00, 0xCC),
    color!(0xE4, 0x00, 0x58),
    color!(0xF8, 0x38, 0x00),
    color!(0xE4, 0x5C, 0x10),
    color!(0xAC, 0x7C, 0x00),
    color!(0x00, 0xB8, 0x00),
    color!(0x00, 0xA8, 0x00),
    color!(0x00, 0xA8, 0x44),
    color!(0x00, 0x88, 0x88),
    color!(0x00, 0x00, 0x00),
    color!(0x00, 0x00, 0x00),
    color!(0x00, 0x00, 0x00),
    color!(0xF8, 0xF8, 0xF8),
    color!(0x3C, 0xBC, 0xFC),
    color!(0x68, 0x88, 0xFC),
    color!(0x98, 0x78, 0xF8),
    color!(0xF8, 0x78, 0xF8),
    color!(0xF8, 0x58, 0x98),
    color!(0xF8, 0x78, 0x58),
    color!(0xFC, 0xA0, 0x44),
    color!(0xF8, 0xB8, 0x00),
    color!(0xB8, 0xF8, 0x18),
    color!(0x58, 0xD8, 0x54),
    color!(0x58, 0xF8, 0x98),
    color!(0x00, 0xE8, 0xD8),
    color!(0x78, 0x78, 0x78),
    color!(0x00, 0x00, 0x00),
    color!(0x00, 0x00, 0x00),
    color!(0xFC, 0xFC, 0xFC),
    color!(0xA4, 0xE4, 0xFC),
    color!(0xB8, 0xB8, 0xF8),
    color!(0xD8, 0xB8, 0xF8),
    color!(0xF8, 0xB8, 0xF8),
    color!(0xF8, 0xA4, 0xC0),
    color!(0xF0, 0xD0, 0xB0),
    color!(0xFC, 0xE0, 0xA8),
    color!(0xF8, 0xD8, 0x78),
    color!(0xD8, 0xF8, 0x78),
    color!(0xB8, 0xF8, 0xB8),
    color!(0xB8, 0xF8, 0xD8),
    color!(0x00, 0xFC, 0xFC),
    color!(0xF8, 0xD8, 0xF8),
    color!(0x00, 0x00, 0x00),
    color!(0x00, 0x00, 0x00),
];
